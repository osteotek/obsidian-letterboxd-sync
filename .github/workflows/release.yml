name: Release

on:
  # Automatic release on tag push
  push:
    tags:
      - "*"
  
  # Manual release via GitHub UI
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Create as draft'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      # ============================================
      # Determine release type and version
      # ============================================
      - name: Determine release type
        id: release_type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=manual" >> $GITHUB_OUTPUT
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "Manual release: ${{ inputs.version }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
            VERSION=${TAG#v}
            echo "type=automatic" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "Automatic release from tag: $TAG"
          fi

      # ============================================
      # Version validation and updates (manual only)
      # ============================================
      - name: Validate version format
        run: |
          VERSION="${{ steps.release_type.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Error: Invalid version format: $VERSION"
            echo "   Use semantic versioning (e.g., 1.1.0)"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

      - name: Update versions (manual only)
        if: steps.release_type.outputs.type == 'manual'
        run: |
          VERSION="${{ steps.release_type.outputs.version }}"
          echo "Updating versions to $VERSION..."
          
          # Update package.json
          npm version $VERSION --no-git-tag-version
          
          # Update manifest.json and versions.json
          npm run version
          
          echo "✅ Versions updated"

      - name: Check version consistency (automatic only)
        if: steps.release_type.outputs.type == 'automatic'
        run: |
          TAG_VERSION="${{ steps.release_type.outputs.version }}"
          MANIFEST_VERSION=$(jq -r '.version' manifest.json)
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          
          echo "Tag version: $TAG_VERSION"
          echo "Manifest version: $MANIFEST_VERSION"
          echo "Package version: $PACKAGE_VERSION"
          
          if [ "$TAG_VERSION" != "$MANIFEST_VERSION" ]; then
            echo "❌ Error: Tag ($TAG_VERSION) doesn't match manifest.json ($MANIFEST_VERSION)"
            exit 1
          fi
          
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ Error: Tag ($TAG_VERSION) doesn't match package.json ($PACKAGE_VERSION)"
            exit 1
          fi
          
          echo "✅ Version consistency verified"

      # ============================================
      # Build and test
      # ============================================
      - name: Run tests
        run: npm test

      - name: Build plugin
        run: npm run build

      - name: Verify build artifacts
        run: |
          for file in main.js manifest.json styles.css; do
            if [ ! -f "$file" ]; then
              echo "❌ Error: Required file $file not found"
              exit 1
            fi
          done
          echo "✅ All required files present"
          ls -lh main.js manifest.json styles.css

      # ============================================
      # Generate release notes
      # ============================================
      - name: Generate release notes
        id: release_notes
        run: |
          TAG="${{ steps.release_type.outputs.tag }}"
          VERSION="${{ steps.release_type.outputs.version }}"
          
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 $TAG^ 2>/dev/null || echo "")
          
          if [ "${{ steps.release_type.outputs.type }}" = "manual" ]; then
            cat > release_notes.md << EOF
          ## Release v$VERSION
          
          This release was created manually via GitHub Actions.
          
          EOF
          elif [ -z "$PREV_TAG" ]; then
            cat > release_notes.md << EOF
          ## 🎉 Initial Release
          
          First release of Letterboxd Sync for Obsidian!
          
          ### Features
          - Import movie data from Letterboxd CSV exports
          - Create markdown notes with movie metadata
          - Download and embed movie posters
          - Customizable templates and metadata fields
          - Real-time progress tracking with success/error counts
          
          EOF
          else
            cat > release_notes.md << EOF
          ## What's Changed
          
          EOF
            
            # Get commits since last tag
            git log $PREV_TAG..$TAG --pretty=format:"- %s" --no-merges >> release_notes.md
            echo "" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Add installation instructions
          cat >> release_notes.md << EOF
          ---
          
          ### Installation
          
          Download \`main.js\`, \`manifest.json\`, and \`styles.css\` from the assets below.
          
          Place them in: \`.obsidian/plugins/letterboxd-sync/\`
          
          EOF
          
          if [ -n "$PREV_TAG" ]; then
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...$TAG" >> release_notes.md
          fi
          
          cat release_notes.md

      # ============================================
      # Create GitHub release
      # ============================================
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_type.outputs.tag }}
          name: Release ${{ steps.release_type.outputs.tag }}
          body_path: release_notes.md
          draft: ${{ inputs.draft || false }}
          prerelease: ${{ inputs.prerelease || false }}
          files: |
            main.js
            manifest.json
            styles.css
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ============================================
      # Commit version changes (manual only, non-draft)
      # ============================================
      - name: Commit version changes
        if: steps.release_type.outputs.type == 'manual' && !inputs.draft
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json manifest.json versions.json
          git commit -m "Release v${{ steps.release_type.outputs.version }}" || echo "No changes to commit"
          git tag ${{ steps.release_type.outputs.tag }} || echo "Tag already exists"
          git push origin main --tags || echo "Nothing to push"

      # ============================================
      # Upload artifacts
      # ============================================
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: obsidian-letterboxd-sync-${{ steps.release_type.outputs.tag }}
          path: |
            main.js
            manifest.json
            styles.css


